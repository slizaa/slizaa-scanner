package org.slizaa.scanner.api.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link INode} specific assertions - Generated by CustomAssertionGenerator.
 */
public abstract class AbstractINodeAssert<S extends AbstractINodeAssert<S, A>, A extends INode> extends AbstractAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractINodeAssert}</code> to make assertions on actual INode.
   * @param actual the INode we want to make assertions on.
   */
  protected AbstractINodeAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual INode's fullyQualifiedName is equal to the given one.
   * @param fullyQualifiedName the given fullyQualifiedName to compare the actual INode's fullyQualifiedName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual INode's fullyQualifiedName is not equal to the given one.
   */
  public S hasFullyQualifiedName(String fullyQualifiedName) {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting fullyQualifiedName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFullyQualifiedName = actual.getFullyQualifiedName();
    if (!Objects.areEqual(actualFullyQualifiedName, fullyQualifiedName)) {
      failWithMessage(assertjErrorMessage, actual, fullyQualifiedName, actualFullyQualifiedName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual INode's id is equal to the given one.
   * @param id the given id to compare the actual INode's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual INode's id is not equal to the given one.
   */
  public S hasId(long id) {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual INode's labels contains the given Label elements.
   * @param labels the given elements that should be contained in actual INode's labels.
   * @return this assertion object.
   * @throws AssertionError if the actual INode's labels does not contain all given Label elements.
   */
  public S hasLabels(Label... labels) {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // check that given Label varargs is not null.
    if (labels == null) failWithMessage("Expecting labels parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getLabels(), labels);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual INode's labels contains <b>only<b> the given Label elements and nothing else in whatever order.
   * @param labels the given elements that should be contained in actual INode's labels.
   * @return this assertion object.
   * @throws AssertionError if the actual INode's labels does not contain all given Label elements.
   */
  public S hasOnlyLabels(Label... labels) {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // check that given Label varargs is not null.
    if (labels == null) failWithMessage("Expecting labels parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getLabels(), labels);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual INode's labels does not contain the given Label elements.
   *
   * @param labels the given elements that should not be in actual INode's labels.
   * @return this assertion object.
   * @throws AssertionError if the actual INode's labels contains any given Label elements.
   */
  public S doesNotHaveLabels(Label... labels) {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // check that given Label varargs is not null.
    if (labels == null) failWithMessage("Expecting labels parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getLabels(), labels);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual INode has no labels.
   * @return this assertion object.
   * @throws AssertionError if the actual INode's labels is not empty.
   */
  public S hasNoLabels() {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have labels but had :\n  <%s>";
    
    // check
    if (actual.getLabels().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getLabels());
    }
    
    // return the current assertion for method chaining
    return myself;
  }
  

  /**
   * Verifies that the actual INode's name is equal to the given one.
   * @param name the given name to compare the actual INode's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual INode's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual INode's nodetype is equal to the given one.
   * @param nodetype the given nodetype to compare the actual INode's nodetype to.
   * @return this assertion object.
   * @throws AssertionError - if the actual INode's nodetype is not equal to the given one.
   */
  public S hasNodetype(String nodetype) {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nodetype of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNodetype = actual.getNodetype();
    if (!Objects.areEqual(actualNodetype, nodetype)) {
      failWithMessage(assertjErrorMessage, actual, nodetype, actualNodetype);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual INode's properties is equal to the given one.
   * @param properties the given properties to compare the actual INode's properties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual INode's properties is not equal to the given one.
   */
  public S hasProperties(java.util.Map properties) {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting properties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualProperties = actual.getProperties();
    if (!Objects.areEqual(actualProperties, properties)) {
      failWithMessage(assertjErrorMessage, actual, properties, actualProperties);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual INode's relationships is equal to the given one.
   * @param relationships the given relationships to compare the actual INode's relationships to.
   * @return this assertion object.
   * @throws AssertionError - if the actual INode's relationships is not equal to the given one.
   */
  public S hasRelationships(java.util.Map relationships) {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting relationships of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualRelationships = actual.getRelationships();
    if (!Objects.areEqual(actualRelationships, relationships)) {
      failWithMessage(assertjErrorMessage, actual, relationships, actualRelationships);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual INode has node id.
   * @return this assertion object.
   * @throws AssertionError - if the actual INode does not have node id.
   */
  public S hasNodeId() {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNodeId()) {
      failWithMessage("\nExpecting that actual INode has node id but does not have.");
    }
    
    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual INode does not have node id.
   * @return this assertion object.
   * @throws AssertionError - if the actual INode has node id.
   */
  public S doesNotHaveNodeId() {
    // check that actual INode we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNodeId()) {
      failWithMessage("\nExpecting that actual INode does not have node id but has.");
    }
    
    // return the current assertion for method chaining
    return myself;
  }

}
