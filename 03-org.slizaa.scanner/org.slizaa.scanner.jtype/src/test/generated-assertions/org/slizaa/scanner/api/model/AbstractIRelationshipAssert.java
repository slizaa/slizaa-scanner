package org.slizaa.scanner.api.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link IRelationship} specific assertions - Generated by CustomAssertionGenerator.
 */
public abstract class AbstractIRelationshipAssert<S extends AbstractIRelationshipAssert<S, A>, A extends IRelationship> extends AbstractAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractIRelationshipAssert}</code> to make assertions on actual IRelationship.
   * @param actual the IRelationship we want to make assertions on.
   */
  protected AbstractIRelationshipAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual IRelationship's relationshipProperties is equal to the given one.
   * @param relationshipProperties the given relationshipProperties to compare the actual IRelationship's relationshipProperties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual IRelationship's relationshipProperties is not equal to the given one.
   */
  public S hasRelationshipProperties(java.util.Map relationshipProperties) {
    // check that actual IRelationship we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting relationshipProperties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualRelationshipProperties = actual.getRelationshipProperties();
    if (!Objects.areEqual(actualRelationshipProperties, relationshipProperties)) {
      failWithMessage(assertjErrorMessage, actual, relationshipProperties, actualRelationshipProperties);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual IRelationship's relationshipType is equal to the given one.
   * @param relationshipType the given relationshipType to compare the actual IRelationship's relationshipType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual IRelationship's relationshipType is not equal to the given one.
   */
  public S hasRelationshipType(RelationshipType relationshipType) {
    // check that actual IRelationship we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting relationshipType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    RelationshipType actualRelationshipType = actual.getRelationshipType();
    if (!Objects.areEqual(actualRelationshipType, relationshipType)) {
      failWithMessage(assertjErrorMessage, actual, relationshipType, actualRelationshipType);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual IRelationship's targetBean is equal to the given one.
   * @param targetBean the given targetBean to compare the actual IRelationship's targetBean to.
   * @return this assertion object.
   * @throws AssertionError - if the actual IRelationship's targetBean is not equal to the given one.
   */
  public S hasTargetBean(INode targetBean) {
    // check that actual IRelationship we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting targetBean of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    INode actualTargetBean = actual.getTargetBean();
    if (!Objects.areEqual(actualTargetBean, targetBean)) {
      failWithMessage(assertjErrorMessage, actual, targetBean, actualTargetBean);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
